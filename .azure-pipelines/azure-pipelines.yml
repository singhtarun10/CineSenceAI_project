trigger:
  branches:
    include:
      - main

variables:
  azureServiceConnection: 'azureconnection'
  appName: 'streamlitapp'
  resourceGroup: 'streamlit-rg'
  pythonVersion: '3.10'

stages:
- stage: BuildAndTest
  displayName: 'Build and Test'
  jobs:
  - job: BuildJob
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(pythonVersion)
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install Dependencies'
    
    - script: |
        pip install pytest
        pytest --junitxml=results.xml || echo "Tests failed but continuing"
      displayName: 'Run Tests'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'results.xml'
      condition: always()
    
    - script: |
        mkdir -p $(Build.ArtifactStagingDirectory)/webapp
        cp -r * $(Build.ArtifactStagingDirectory)/webapp/
        ls -la $(Build.ArtifactStagingDirectory)/webapp/
      displayName: 'Package App'
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/webapp'
        artifact: 'webapp'

- stage: DeployDev
  displayName: 'Deploy to Development'
  dependsOn: BuildAndTest
  condition: succeeded()
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to Dev Environment'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'webapp'
              targetPath: '$(Pipeline.Workspace)/webapp'
          
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureServiceConnection)
              appType: webAppLinux
              appName: '$(appName)-dev'
              resourceGroupName: $(resourceGroup)
              package: '$(Pipeline.Workspace)/webapp'
              startupCommand: 'pip install -r requirements.txt && python -m streamlit run main.py --server.port 8000 --server.address 0.0.0.0'

- stage: DeployQA
  displayName: 'Deploy to QA'
  dependsOn: DeployDev
  condition: succeeded()
  jobs:
  - deployment: DeployQA
    displayName: 'Deploy to QA Environment'
    environment: 'qa'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'webapp'
              targetPath: '$(Pipeline.Workspace)/webapp'
          
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureServiceConnection)
              appType: webAppLinux
              appName: '$(appName)-qa'
              resourceGroupName: $(resourceGroup)
              package: '$(Pipeline.Workspace)/webapp'
              startupCommand: 'pip install -r requirements.txt && python -m streamlit run main.py --server.port 8000 --server.address 0.0.0.0'

- stage: DeployStaging
  displayName: 'Deploy to Staging'
  dependsOn: DeployQA
  condition: succeeded()
  jobs:
  - deployment: DeployStaging
    displayName: 'Deploy to Staging Slot'
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'webapp'
              targetPath: '$(Pipeline.Workspace)/webapp'
          
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureServiceConnection)
              appType: webAppLinux
              appName: $(appName)
              slotName: 'staging'
              resourceGroupName: $(resourceGroup)
              package: '$(Pipeline.Workspace)/webapp'
              startupCommand: 'pip install -r requirements.txt && python -m streamlit run main.py --server.port 8000 --server.address 0.0.0.0'

- stage: DeployProd
  displayName: 'Swap to Production'
  dependsOn: DeployStaging
  condition: succeeded()
  jobs:
  - deployment: SwapSlots
    displayName: 'Swap Staging to Production'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: $(azureServiceConnection)
              WebAppName: $(appName)
              ResourceGroupName: $(resourceGroup)
              SourceSlot: 'staging'
              TargetSlot: 'production'
              Action: 'Swap Slots'